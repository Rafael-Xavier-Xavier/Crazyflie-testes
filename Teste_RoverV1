# -*- coding: utf-8 -*-
#
#     ||          ____  _ __
#  +------+      / __ )(_) /_______________ _____  ___
#  | 0xBC |     / __  / / __/ ___/ ___/ __ `/_  / / _ \
#  +------+    / /_/ / / /_/ /__/ /  / /_/ / / /_/  __/
#   ||  ||    /_____/_/\__/\___/_/   \__,_/ /___/\___/
#
#  Copyright (C) 2017 Bitcraze AB
#
#  Crazyflie Nano Quadcopter Client
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
import logging
import time

import cflib.crtp
from cflib.crazyflie import Crazyflie
from cflib.crazyflie.log import LogConfig
from cflib.crazyflie.syncCrazyflie import SyncCrazyflie
from cflib.crazyflie.syncLogger import SyncLogger
from cflib.utils import uri_helper

# URI to the Crazyflie to connect to
uri = uri_helper.uri_from_env(default='radio://0/90/2M/E7E7E7E701')

# Only output errors from the logging framework
logging.basicConfig(level=logging.ERROR)


def param_stab_est_callback(name, value):
    print('The crazyflie has parameter ' + name + ' set at number: ' + value)
x = 1

def Forword2_param_async(scf, group1, name1, name2, name3):
    cf = scf.cf
    wheels = group1
    state = name1
    pwm_1 = name2
    pwm_2 = name3

    #cf.param.add_update_callback(wheels=groupstr, name=state,
    #                             cb=param_stab_est_callback)
    time.sleep(0.1)
    cf.param.set_value(wheels + '.' + state, 2)
    cf.param.set_value(wheels + '.' + pwm_1, 5)
    cf.param.set_value(wheels + '.' + pwm_2, 5)
    time.sleep(1.0)
    cf.param.set_value(wheels + '.' + state, 3)
    cf.param.set_value(wheels + '.' + pwm_1, 250)
    cf.param.set_value(wheels + '.' + pwm_2, 250)
    time.sleep(1.0)
    cf.param.set_value(wheels + '.' + state, 4)
    cf.param.set_value(wheels + '.' + pwm_1, 5)
    cf.param.set_value(wheels + '.' + pwm_2, 5)
    time.sleep(0.5)

def Forword_param_async(scf, groupstr, namestr):
    cf = scf.cf
    full_name = groupstr + '.' + namestr

    cf.param.add_update_callback(group=groupstr, name=namestr,
                                 cb=param_stab_est_callback)
    time.sleep(0.1)
    cf.param.set_value(full_name, 1)
    time.sleep(0.5)
    cf.param.set_value(full_name, 2)
    time.sleep(1.0)
    cf.param.set_value(full_name, 3)
    time.sleep(1.0)
    cf.param.set_value(full_name, 4)
    time.sleep(0.5)
    # time.sleep(1)


def log_stab_callback(timestamp, data, logconf):
    print('[%d][%s]: %s' % (timestamp, logconf.name, data))


def simple_log_async(scf, logconf):
    cf = scf.cf
    cf.log.add_config(logconf)
    logconf.data_received_cb.add_callback(log_stab_callback)
    logconf.start()
    time.sleep(5)
    logconf.stop()


def simple_log(scf, logconf):

    with SyncLogger(scf, lg_stab) as logger:

        for log_entry in logger:

            timestamp = log_entry[0]
            data = log_entry[1]
            logconf_name = log_entry[2]

            print('[%d][%s]: %s' % (timestamp, logconf_name, data))

            break


def simple_connect():

    print("Yeah, I'm connected! :D")
    time.sleep(3)
    print("Now I will disconnect :'(")


if __name__ == '__main__':
    # Initialize the low-level drivers
    cflib.crtp.init_drivers()

    lg_stab = LogConfig(name='Wheels', period_in_ms=10)
    lg_stab.add_variable('wheels.state', 'float')
    lg_stab.add_variable('wheels.pwm_1', 'float')
    lg_stab.add_variable('wheels.pwm_2', 'float')

    group = 'wheels'
    name = 'state'
   
    a = 'wheels'
    b = 'state'
    c = 'pwm_1'
    d = 'pwm_2'
 
#    lg_stab = LogConfig(name='Wheels', period_in_ms=10)
#    lg_stab.add_variable('wheels.state', 'float')
#    lg_stab.add_variable('wheels.state', 'float')
#    lg_stab.add_variable('wheels.state', 'float')
#    lg_stab.add_variable('wheels.state', 'float')

#    group = 'wheels'
#    name = 'pwm_1'

    with SyncCrazyflie(uri, cf=Crazyflie(rw_cache='./cache')) as scf:

        # simple_connect()

        # simple_log(scf, lg_stab)

        # simple_log_async(scf, lg_stab)

        if x == 1:
            Forword2_param_async(scf, a, b, c, d)
        else :
            0
